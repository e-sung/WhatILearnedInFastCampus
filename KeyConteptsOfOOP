# 객체지향 패러다임 주요 개념정리

## 1. 추상화(Abstraction) / 상속(Inheritance)

![tree of life](https://i.pinimg.com/originals/f6/e8/09/f6e8093050df5c7e96b8205e0cc9f575.jpg)

>  Class 는 생물분류단계 중 "강"을 뜻하는 영어이다. (예: 포유강, 양서강 등)

* 내가 신이 되어서 생명체들을 만든다고 생각해보자.

* 이 때, 최초의 생명을 만들 때 가장 주의해야 할 것은 무엇일까?

* 모든 생명은 최초의 생명의 DNA를 어떤 형태로든 물려받을 것이므로, 최초의 생명은 가장 단순하고 최대한 심플하게 디자인해야 한다. 마치 최초의 생명인 단세포 생물들처럼 말이다.

* 그래야 생물들이 최대한 여러방향으로 진화할 수 있는 여지가 더욱 많이 생긴다. 

* 처음부터 쓸데없이 생명을 세밀하게 정의한다면, 상황이 바뀌었을 때 큰 재양이 닥칠 것이다. 예를 들어 모든 생명이 산소로 호흡한다는 속성을 기본으로 가져버린다면, 지구의 대기가 바뀌었을 때 모든 생명은 멸종할 것이다. 

* 이렇게 클래스를 디자인 할 때 쓸데없이 세밀한 속성을 최대한 제거하기 위해 노력하는 것을 "추상화"(Abstraction)라고 한다.

  ---

* 반대로, 최초의 생명의 후예들은 진화를 통해 새로운 속성을 얻을 수 있다. 

* 그러나 이 때, 진화는 막무가내로 일어나지 않는다.

* 기본적으로는 조상들의 속성 대부분을 물려받고, 그 중 일부분만 수정하거나 새로운 속성/능력 몇 개가 추가되는 식이다. 즉 창조주(프로그래머)는 처음부터 모든 생명 하나하나를 처음부터 만들 필요가 없다. 

* 이처럼 부모클래스의 속성 대부분을 물려받고 꼭 필요한 속성/기능 몇가지 만을 추가하거나 변경해 새로운 클래스를 만드는 방식을 상속(Inheritance)라고 한다.



## 캡슐화(Encapsulation) / 은닉화(Hiding)

![살아서 장까지](http://upload.luckyworld.net/lifeboard/2015/06/29/0629_3890.jpg)

* 유산균이 장까지 살아서 가려면 닥터캡슐이 필요하다.
* 캡슐이 없으면 나쁜 악당들이 유산균을 때릴 수도 있기 때문이다. 
* 아무나 유산균을 때릴 수 없도록, 유산균에겐 캡슐 보호막을 씌워줘야 한다(Encapsulation)
* 예를 들어, 대학생이라는 클래스는 학년이라는 속성값을 가질 수 있다. 이 때 학년은 1~4 사이의 값을 갖는다.
* 근데 만약 이 속성값을 아무나 마구마구 바꿀 수 있다면, 이 속성값을 -1로 바꾸는 것도 가능할 것이다. 
* 그러면 혼란이 시작된다.
* 혼란을 막기위해, 오직 정해진 값 내에서(1학년~4학년) 학년을 바꿀 수 있도록 해야한다. 
* 이를 위해 먼저 "학년"이라는 속성 값을 외부에선 보이지 않도록 만들어야 한다.(Hiding)
* 그리고 외부의 요청이 정당한지 등을 검사하는 과정을 거쳐서 그 값이 바뀌도록 해야한다.
* 물론 이러한 "검증과정"은 외부에서 알 필요는 없다. (Encapsulation)



## 다형성 (Polymorphism)

![Professor McGonagall polymorphs from cat to human](https://m.popkey.co/78beda/YNQeQ.gif)



* 프로그래머는 마법사니까 당연히 변신(Polymorph)정도는 할 줄 알아야 한다. 

* 맥고나걸이라는 한 실체는 변신이라는 능력을 가지고 있기 때문에, 원하는 바에 따라 사람의 모습을 할 수도 있고 고양이의 모습을 할 수도 있다.

* 이처럼 같은 클래스/객체가 맥락에 따라 다른 모습/기능으로 동작하는 성질을 다형성(Polymorphism)이라고 한다.

* 변신을 하는 구체적인 방법은 크게 `Overloading`과 `Overriding` 두 가지가 있다.

  * `Overloading`:
    
    * ```swift
        class Witch(){
        var name = ""
        func init(){ // init의 1번 모습
          name = "McGonagall"
          }
          func init(withName:String){ // init의 2번 모습
            name = withName
          }
        }
        ```

    * ​위에서 init이라는 메소드를 두 번 정의했다. 

    * ​이렇게 하면 클래스는 사용자의 요청에 맞추어 init이라는 메소드를 변신(polymorph)시켜 내놓는다. 

    * ​ 만약 매개변수 없이 init함수를 실행하면 init의 1번 모습을 실행시키고 

    * ​ 이름이라는 매개변수를 사용해서 init함수를 싱행하면 init의 2번 모습을 실행시키는 것이다. 

  * `Overriding` : 

    * ```swift
      class Life(){
          func breathe(o:Oxygen){
              print("Hoo Haa")
          }
      }

      class HydrothermalVentLife : Life(){
          override func breathe(n:Nitrogen){
              print("질소 호흡")
          }
      }
      ```

    * 생명체는 호흡을 통해 에너지를 생산한다. 즉, 가스를 태워 에너지를 얻는다. 

    * 태초의 생태계에 대해선 잘 모르지만 지금처럼 산소를 태웠다고 하자.

    * 그러나 심해수열구의 생물들은 질소로 호흡한다. 

    * 심해수열구의 생물들은, 가스를 태워 에너지를 얻는다는 본질에서는 우리와 큰 차이가 없다. 그저 산소대신 질소를 태울 뿐이다.

    * 즉, 심해수열구 생물들은 심해에서 살아남기 위해 호흡이라는 기능을 조금 변신(polymorph)시킨 것이다.
